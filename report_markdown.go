package drivercaps

import (
	"bufio"
	"html/template"
	"io"
	"log"
	"os"
	"time"
)

func renderMarkdown(results [][]string, test *DriverTest, tim time.Time) {
	writeMarkdown(os.Stdout, results, test, tim)
}

func writeMarkdownFile(results [][]string, test *DriverTest, tim time.Time) {

	// TODO(js) This is a bad code smell. We override the default headings from csv,
	// both here and when dealing with ascii :/
	header := []string{
		"DDL Definition",
		".Name",
		".DBTypeName",
		".Nullable",
		".DecimalSize",
		".Length",
		".ScanType",
	}

	var res [][]string
	res = append(res, header)
	res = append(res, results[1:len(results)]...)
	results = res

	filename := localFilename(markdownFilename)
	// log.Println("filename", filename)
	f, err := os.OpenFile(filename, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	bufw := bufio.NewWriter(f)
	writeMarkdown(bufw, results, test, tim)
	bufw.Flush()
}

// func markdownFilename() string {
// 	wd, err := os.Getwd()
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	return wd + "/README.md"
// }

func writeMarkdown(w io.Writer, results [][]string, test *DriverTest, tim time.Time) {

	// TODO(js) Externalise this (markdown) template.
	// "[]*" html escaped for markdown = &#91;&#93;&#42;
	const tpl = `
# Driver sql.ColumnType Capability Report

- Package "{{.Package}}" ({{.Driver}})
- {{.Database}}

(Please scroll left/right to view full table contents)

<table>
	<thead>
		<tr>
			{{range .Headings}}<th>{{ . }}</th>{{end}}
		</tr>
	</thead>
	<tbody>{{range $row := .Rows}}
		<tr>{{range $row}}
			{{if and (ne . "-") (ne . "")}}<td nowrap><code>{{ . }}</code></td>{{end}}{{if eq . "-"}}<td>-</td>{{end}}{{if eq . ""}}<td/>{{end}}{{end}}
		</tr>{{end}}
	</tbody>
</table>

Report for [{{.Package}}](https://{{.URL}}) ({{.Driver}})<br/>
Test timestamp {{.Timestamp}}<br/>
Generated by [drivercaps](https://github.com/jimsmart/drivercaps)

`

	t, err := template.New("webpage").Parse(tpl)
	if err != nil {
		log.Fatalf("template.Parse error %v", err)
	}

	data := struct {
		Database  string
		URL       string
		Package   string
		Driver    string
		Headings  []string
		Rows      [][]string
		Timestamp string
	}{
		Database:  test.Database,
		URL:       test.PkgURL,
		Package:   test.PkgName,
		Driver:    test.DrvName,
		Headings:  results[0],
		Rows:      results[1:len(results)],
		Timestamp: tim.Format(time.RFC3339),
	}

	err = t.Execute(w, data)
	if err != nil {
		log.Fatalf("template.Execute error %v", err)
	}
}
